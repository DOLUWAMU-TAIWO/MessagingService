name: Deploy MessagingService to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the application (Skipping tests)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/messaging-service .
          docker tag ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest

      # Step 7: Decode and set up SSH Key
      - name: Decode SSH Key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > ~/decoded-key.pem
          chmod 400 ~/decoded-key.pem

      # Step 8: Deploy to EC2 via SSH
      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/decoded-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Stop and remove existing container if running
            if [ "$(docker ps -aq -f name=messaging_service)" ]; then
              docker stop messaging_service
              docker rm messaging_service
            fi

            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest

            # Run new container
            docker run -d --name messaging_service -p 8080:8080 -p 9091:9091 \
              -e spring.security.user.password="${{ secrets.SERVICE_PASSWORD }}" \
              -e SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
              -e spring.profiles.active="prod" \
              --network messaging-network \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/messaging-service:latest

            # Restart Prometheus if needed
            if [ "$(docker ps -aq -f name=prometheus)" ]; then
              docker restart prometheus
            fi
          EOF
